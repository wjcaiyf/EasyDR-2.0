#!/usr/bin/env python

from __future__ import print_function
__metaclass__ = type

from SocketServer import ThreadingTCPServer
from SocketServer import StreamRequestHandler

import sys
sys.path.append('/etc/easydr/site-packages')
from easydr_tools import *
from handler_vi import vi_backup_dir
import time
import shutil
import socket
import os

log_file = '/var/log/vbserver.log'
log_vbserver = MyLogger('log_vbserver')
log_vbserver.addHandler(MyRotatingFileHandler(log_file))

class MyRequestHandler(StreamRequestHandler):
    def __do_backup(self,user, file_dirname, file_name, origin_backup=False):
        vbd = vi_backup_dir + user + "/" + socket.gethostname() + '/' + file_dirname
        try:
            os.makedirs(vbd)
        except OSError:
            pass
        MyCall('chmod 1777 %s' % vbd)
        try:
            if origin_backup:
                tmp_dest = vbd + '/' + os.path.basename(file_name) + '_origin'
                if not os.path.exists(tmp_dest):
                    try:
                        shutil.copy2(file_name, tmp_dest)
                    except Exception, e:
			log_vbserver.warn(e, exc_info=1)
                        pass
            else:
                shutil.copy2(file_name, vbd + '/' + os.path.basename(file_name) + "_" + time.strftime("%Y-%m-%d-%H-%M-%S"))
        except Exception, e:
            log_vbserver.warn(e, exc_info=1)
            pass
        
    def MyAction(self,pid):
        get_info_cmd = """ps -ef e| awk '$2==%s' | \
                            awk '{ print $1; print $10; \
                            for(i=1;i<=NF;i++){if($i~/^PWD/){ split($i,tp,"="); print tp[2]; break }}}'"""
        try:
            user, file_name, pwd = get_shell_results(get_info_cmd % pid)
        except Exception, e:
            log_vbserver.exception(e)
            return
        if not os.path.isabs(file_name):
            file_name = pwd + "/" + file_name
        file_dirname = os.path.dirname(file_name).replace('/','_')[1:]
        self.__do_backup(user, file_dirname, file_name, origin_backup=True)
        while True:
            time.sleep(2)
            if MyCall('ps -p %s &>/dev/null' % pid) == 0: pass
            else: break
        self.__do_backup(user, file_dirname, file_name)

    def handle(self):
        try:
            pids = self.rfile.readline().strip().split(',')
        except Exception, e:
            log_vbserver.exception(e)
        log_vbserver.info("Receive data: %s" % pids)
        tds = []
        for pid in pids:
            tds.append(MyThread(self.MyAction, args=(pid,)))
        for td in tds:
            td.start()
        for td in tds:
            td.join()

def RunTCPServer(host='127.0.0.1', port=34567):
    tcpServ = ThreadingTCPServer((host, port), MyRequestHandler)
    try:
        tcpServ.serve_forever()
    except (KeyboardInterrupt,EOFError):
        print('Closing TCPServer ...')
        tcpServ.shutdown()

if __name__ == "__main__":
    RunTCPServer()
