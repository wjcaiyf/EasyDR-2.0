#!/usr/bin/env python

from __future__ import print_function
__metaclass__ = type

import os
import time
from subprocess import (Popen,PIPE,STDOUT,call)
import ConfigParser
import socket
import sys
from easydr_tools import *
import re

easydr_basedir = '%STORAGE_PATH%/easydr/'

dr_basedir = easydr_basedir + "dr/"
log_dir= dr_basedir + "logs/"
log_file = log_dir + socket.gethostname() + ".log"
video_dir = dr_basedir + 'videos/'

try:
    os.makedirs(log_dir)
except OSError:
    pass

log_dr = MyLogger('log_dr')
log_dr.addHandler(MyRotatingFileHandler(log_file))

def Execute_rmd_for_someone(username, disp, mydate):
    user_video_dir = video_dir + username + "/" + socket.gethostname()
    try:
        os.makedirs(user_video_dir)
    except OSError:
        pass
    MyCall('chmod 1777 %s' % user_video_dir)
    if username == 'root':
        rmd_cmd = '''/usr/bin/recordmydesktop -o %s/%s.ogv \
		    --fps 10 --no-shared --no-wm-check \
		    --no-sound --workdir /tmp \
		    --on-the-fly-encoding --display %s &>> /tmp/.%s.log &''' % (user_video_dir, mydate, disp, username)
    else:
        rmd_cmd = '''su -c "/usr/bin/recordmydesktop -o %s/%s.ogv \
		    --fps 10 --no-shared --no-wm-check \
		    --no-sound --workdir /tmp \
		    --on-the-fly-encoding --display %s &>> /tmp/.%s.log &" %s''' % (user_video_dir, mydate, disp, username, username)
    log_dr.info(" ".join(rmd_cmd.split()))
    return rmd_cmd

def GenerateList(source_file, debug_on):
     try:
        with open(source_file) as obj:
            mylines = obj.readlines()
     except IOError:
        return []
     if source_file == '/etc/easydr/.users':
        handled_list = [ n.strip() for n in mylines if not n.strip().startswith("#") if n.strip() != "" ]
     else:
        handled_list = [ n.strip() for n in mylines if not n.strip().startswith("#") if n.strip() != "" if len(n.strip()) >= 5 ]
     if debug_on:
        if source_file == '/etc/easydr/.pks':
            for i in mylines:
                i = i.strip()
                if not i.startswith("#") and i != "":
                    if len(i) <= 5:
                        log_dr.debug('"%s":( %s ) is less than 5 characters, skipping' % (source_file, i))
     return handled_list

def test_rmd_for_someone_display(user,display):
    tmp_cmd = '''ps -ef | grep -v grep | grep /usr/bin/recordmydesktop | grep ^%s |grep -w %s''' % (user, display)
    if MyCall(tmp_cmd, stderr=STDOUT, stdout=PIPE) == 0:
	return True
    return False

def condition_kill_unused_rmd(td, debug_on):
    get_user_for_running_rmd_cmd = """ps -ef |grep -v grep |grep /usr/bin/recordmydesktop | awk '{ print $1 }'"""
    get_pid_for_running_rmd_cmd = """ps -ef |grep -v grep |grep /usr/bin/recordmydesktop | awk '{ print $2 }'"""
    get_display_for_running_rmd_cmd = """ps -ef |grep -v grep |grep /usr/bin/recordmydesktop | awk '{ print $NF }'"""

    running_rmd_user_list = get_shell_results(get_user_for_running_rmd_cmd)
    running_rmd_pid_list = get_shell_results(get_pid_for_running_rmd_cmd)
    running_rmd_display_list = get_shell_results(get_display_for_running_rmd_cmd)

    waiting_killed_rmd_list = zip(running_rmd_user_list, running_rmd_pid_list, running_rmd_display_list)

    if debug_on:
        log_dr.debug('running_rmd_user_list: %s' % running_rmd_user_list)
        log_dr.debug('running_rmd_pid_list: %s' % running_rmd_pid_list)
        log_dr.debug('running_rmd_display_list: %s' % running_rmd_display_list)
        log_dr.debug('waiting_killed_rmd_list: %s' % waiting_killed_rmd_list)
        

    if not running_rmd_pid_list:
        if debug_on:
            log_dr.debug('NO Unused recordmydesktop process that needs to kill.')
    else:
        for wuser, wpid, wdisplay in waiting_killed_rmd_list:
            if wdisplay not in td:
                log_dr.warn('task [user:"%s", pid:"%s", display:"%s"] will be killed.' % (wuser, wpid, wdisplay))
                MyCall("kill -2 %s" % wpid)
            else:
                if debug_on:
                    log_dr.debug('task [user:"%s", pid:"%s", display:"%s"] is being used.' % (wuser, wpid,wdisplay) )

def kill_all_rmd(mymessage, debug_on):
    if debug_on:
	log_dr.debug(mymessage)
    if MyCall('ps -ef | grep -v grep |egrep -w "recordmydesktop"', stderr=STDOUT,stdout=PIPE) == 0:
        get_user_for_running_rmd = """ps -ef |grep -v grep |grep -w recordmydesktop | awk '{ print $1 }'"""
        get_pid_for_running_rmd = """ps -ef |grep -v grep |grep -w recordmydesktop | awk '{ print $2 }'"""
        rrul = get_shell_results(get_user_for_running_rmd)
        rrpl = get_shell_results(get_pid_for_running_rmd)
        for myuser, mypid in zip(rrul, rrpl):
	    log_dr.warn('task [user:"%s", pid:"%s"] will be killed.' % (myuser,mypid))
            MyCall("kill -2 %s" % mypid)

def Handler_dr(debug_on, musers, mpks):
    if debug_on:
        log_dr.debug('musers: "%s"' % musers )
	log_dr.debug('mpks: "%s"' % mpks )
    if not musers:
        if debug_on:
	    log_dr.debug('NO Specify Monitored Users, All users will be Monitored.')
    if not mpks:
	log_dr.warn('No specify Monitored process keywords, Nothing to do.')
	#
        # if you do't want to kill all running recordmydesktop when no specify Process Keywords 
        # comment out the following line.
        # 
	kill_all_rmd('Because No Specify ProcessWords, All running recordmydesktop porcesses will be killed.', debug_on)
        return

    mpks_str = "|".join(mpks)

    if debug_on:
        log_dr.debug('mpks_str: %s' % mpks_str)
        log_dr.debug('prerequisite_cmd: %s' % 'ps -ef | grep -v grep |egrep -w "%s"' % mpks_str)

    if MyCall('ps -ef | grep -v grep |egrep -w "%s"' % mpks_str, stderr=STDOUT,stdout=PIPE) == 0:
        getuser_cmd = """ps -ef |grep -v grep |egrep -w "%s" | awk '{ print $1 }'"""
        gettmppid_cmd = """ps -ef | grep -v grep |egrep -w "%s" | awk '{ print $2 }'"""
        getdisplay_cmd = """ps -ef e |grep -v grep |egrep -w "%s" | \
                            awk '$2==a' a=%s | \
                            awk '{ for(i=1;i<=NF;i++){ if($i~/^DISPLAY/){ split($i,tp,"="); print tp[2]; break } } }'"""

        target_users = []
        target_pks = []
        target_displays = []

        for i in mpks:
            if MyCall('ps -ef | grep -v grep |egrep -w "%s"' % i, stderr=STDOUT,stdout=PIPE) == 0:
                tmp_users = [ n for n in re.split(r'\s',Popen(getuser_cmd % i, shell=True, stdout=PIPE, stderr=STDOUT).communicate()[0]) if n != "" ]
                for j in range(len(tmp_users)):
                    target_pks.append(i)
                target_users.extend(tmp_users)
                tmp_pid = [ n for n in re.split(r'\s',Popen(gettmppid_cmd % i, shell=True, stdout=PIPE, stderr=STDOUT).communicate()[0]) if n != "" ]

                for j in tmp_pid:
                    if not Popen(getdisplay_cmd % (i, j), shell=True, stdout=PIPE, stderr=STDOUT).communicate()[0]:
                        target_displays.append("None")
                    else:
                        target_displays.extend([n for n in re.split(r'\s',Popen(getdisplay_cmd % (i, j), shell=True, stdout=PIPE, stderr=STDOUT).communicate()[0]) if n != "" ])

        target_tasks = set()

        for i in zip(target_users,target_pks,target_displays):
             target_tasks.add(i)

        if debug_on:
	    log_dr.debug('target_displays: %s' % target_displays)
	    log_dr.debug('target_tasks: %s' % target_tasks)

        for tuser, tcommand, tdisplay in target_tasks:
	    if musers:
                if tuser not in musers:
                    if debug_on:
                        log_dr.debug('Found Monitored pk "%s", But user "%s" is not monitored user.' % (tcommand,tuser))
	        elif tdisplay == "None":
                    log_dr.warn('Found monitored pk "%s" and User "%s" is also monitored user, But the monitored pk does not need X' % (tcommand,tuser))
	        else:
		    if not test_rmd_for_someone_display(tuser, tdisplay):
		        log_dr.info('task [user:"%s", display:"%s", pk:"%s"] is not running, Run it with the following command:' % (tuser, tdisplay,tcommand))
  		        MyCall(Execute_rmd_for_someone(tuser,tdisplay,time.strftime("%Y-%m-%d-%H-%M-%S")))
		    else:
		        if debug_on:
		            log_dr.debug('task [user:"%s", display:"%s", pk:"%s"] is already running.' % (tuser, tdisplay,tcommand))
	    else:
	        if tdisplay == "None":
                    log_dr.warn('Found monitored pk "%s" and User "%s" is also monitored user, But the monitored pk does not need X' % (tcommand,tuser))
	        else:
		    if not test_rmd_for_someone_display(tuser, tdisplay):
		        log_dr.info('task [user:"%s", display:"%s", pk:"%s"] is not running, Run it with the following command:' % (tuser, tdisplay,tcommand))
  		        MyCall(Execute_rmd_for_someone(tuser,tdisplay,time.strftime("%Y-%m-%d-%H-%M-%S")))
		    else:
		        if debug_on:
		            log_dr.debug('task [user:"%s", display:"%s", pk:"%s"] is already running.' % (tuser, tdisplay,tcommand))

        condition_kill_unused_rmd(target_displays, debug_on)
    else:
        kill_all_rmd('''No Monitored ProcessKeywords Found, All running recordmydesktop will be killed.''', debug_on)
