#!/usr/bin/env python

from __future__ import print_function
__metaclass__ = type

import sys
sys.path.append('/etc/easydr/site-packages')

from easydr_tools import *
import os
import time
import socket
from handler_dr import easydr_basedir

vi_basedir = easydr_basedir + "vi/"
log_dir = vi_basedir + "logs/"
log_file = log_dir + socket.gethostname() + ".log"
vi_backup_dir = vi_basedir + 'vibackups/'

try:
    os.makedirs(log_dir)
except OSError:
    pass

log_vi = MyLogger('log_vi')
log_vi.addHandler(MyRotatingFileHandler(log_file))

submitted_pids = []

def Handler_vi(debug_on, musers):
    global submitted_pids
    get_vi_users = "ps -ef e| awk '$9~/(\/)?vi(m)?/' | awk '{ print $1 }'"
    get_vi_pids = "ps -ef e| awk '$9~/(\/)?vi(m)?/' | awk '{ print $2 }'"
    vi_users = get_shell_results(get_vi_users)
    if not vi_users:
        if debug_on:
            log_vi.debug("No vi process found. Nothing to do.")
            submitted_pids = []
        return
    if debug_on:
        log_vi.debug("found vi process, The users are: %s" % vi_users)
    vi_pids = get_shell_results(get_vi_pids)
    vi_tasks = []
    if not musers:
        if debug_on:
            log_vi.debug("No monitored users were provided, All users's vi processes will be monitored.")
        if not submitted_pids:
            if debug_on:
                log_vi.debug("submitted_pids is %s ." % submitted_pids)
            for user,pid in zip(vi_users, vi_pids):
                vi_tasks.append(pid)
            vi_tasks = ",".join(vi_tasks)
            log_vi.info('Send vi_tasks: %s to VbServer' % vi_tasks)
            try:
                sendto_vbserver(vi_tasks)
	    except Exception, e:
		log_vi.exception(e)
            else:
		log_vi.info("send vi_tasks to VbServer successfully.")
            submitted_pids = vi_pids
        else:
            if debug_on:
                log_vi.debug("submitted_pids is %s ." % submitted_pids)
            for user,pid in zip(vi_users, vi_pids):
                if pid not in submitted_pids:
                    vi_tasks.append(pid)
            submitted_pids = vi_pids
            if vi_tasks:
		vi_tasks = ",".join(vi_tasks)
                log_vi.info('Send another vi_tasks: %s to VbServer.' % vi_tasks)
       	        try:
                    sendto_vbserver(vi_tasks)
	        except Exception,e:
		    log_vi.exception(e)
                else:
		    log_vi.info("send vi_tasks to VbServer successfully.")
    else:
        if debug_on:
            log_vi.debug("Monitored users were provided, only users in: %s will be monitored" % musers)
        if not submitted_pids:
            for user,pid in zip(vi_users, vi_pids):
                if user in musers:
                    vi_tasks.append(pid)
                    submitted_pids.append(pid)
                else:
                    if debug_on:
                        log_vi.debug("""User "%s" is not in: %s, skip""" % (user, musers))
            if vi_tasks:
		vi_tasks = ",".join(vi_tasks)
                log_vi.info('Send vi_tasks: %s to VbServer' % vi_tasks)
                try:
                    sendto_vbserver(vi_tasks)
		except Exception, e:
		    log_vi.exception(e)
                else:
		    log_vi.info("send vi_tasks to VbServer successfully.")
        else:
            if debug_on:
                log_vi.debug("""submitted_pids is: %s.""" % submitted_pids)
            submitted_tmp_pids = []
            for user,pid in zip(vi_users, vi_pids):
                if user in musers:
                    if pid not in submitted_pids:
                        vi_tasks.append(pid)
                    submitted_tmp_pids.append(pid)
                else:
                    if debug_on:
			log_vi.debug("""User: "%s" is not in: %s, skip""" % (user, musers))
            submitted_pids = submitted_tmp_pids
            if vi_tasks:
		vi_tasks = ",".join(vi_tasks)
                log_vi.info('Send another vi_tasks: %s to VbServer.' % vi_tasks)
       	        try:
                    sendto_vbserver(vi_tasks)
	        except Exception,e:
		    log_vi.exception(e)
                else:
		    log_vi.info("send vi_tasks to VbServer successfully.")
