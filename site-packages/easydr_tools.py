#!/usr/bin/env python

from __future__ import print_function
__metaclass__ = type

import logging
from logging.handlers import RotatingFileHandler
from subprocess import call
import ConfigParser
from subprocess import Popen
from subprocess import PIPE
from subprocess import STDOUT
from socket import *
import threading

__all__ = ['MyThread',
	   'MyLogger', 
	   'ParserConfigFile', 
	   'MyCall', 
	   'MyRotatingFileHandler',
	   'get_shell_results',
	   'sendto_vbserver']

class MyThread(threading.Thread):
    def __init__(self, func, args):
        self.func = func
        self.args = args
        super(MyThread, self).__init__()

    def run(self):
        apply(self.func, self.args)

class MyLogger(logging.Logger):
    def __init__(self, name, level=logging.DEBUG):
        logging.Logger.__init__(self, name, level)

class ParserConfigFile:
    def __init__(self, config_file):
        self.config_file = config_file
        self.cp = ConfigParser.ConfigParser()

    def get_value(self, section_name, option_name, on_type_bool=False):
        self.cp.read(self.config_file)
        if on_type_bool:
            return self.cp.getboolean(section_name, option_name)
        return self.cp.get(section_name, option_name)

def MyCall(*args,**kwargs):
    return call(*args, shell=True, **kwargs)

def MyRotatingFileHandler(logfile_name, mb=50*1024, bc=0, datefmt='%Y-%m-%d %H:%M:%S', 
        format_str = '%(asctime)s %(filename)s %(funcName)s [%(levelname)s] %(message)s'):
    fh = RotatingFileHandler(logfile_name,maxBytes=mb,backupCount=bc)
    formatter = logging.Formatter(format_str, datefmt)
    fh.setFormatter(formatter)
    return fh

def get_shell_results(shell_cmd):
    return [ n for n in Popen(shell_cmd, shell=True, stdout=PIPE, stderr=STDOUT).communicate()[0].split("\n") if n != "" ]

def sendto_vbserver(data, host='127.0.0.1', port=34567):
    tc = socket(AF_INET, SOCK_STREAM)
    tc.connect((host, port))
    tc.send('%s\n' % data)
    tc.close()
